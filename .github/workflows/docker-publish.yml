name: Build and Push Docker Images

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Free disk space before build
        run: |
          echo "Disk space before cleanup:"
          df -h
          sudo swapoff -a
          sudo rm -rf /swapfile /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
          sudo apt-get clean
          sudo docker system prune -af
          docker builder prune -af
          echo "Disk space after cleanup:"
          df -h

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
          buildkitd-flags: --debug

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: dihan/hunyuan-runpod
          tags: |
            type=raw,value=${{ github.ref_name }}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: debug-image:latest
          build-args: |
            PYTHON_VERSION=${{ vars.PYTHON_VERSION }}
            TORCH_VERSION=${{ vars.TORCH_VERSION }}
            CUDA_VERSION=${{ vars.CUDA_VERSION }}
            COMFYUI_VERSION=${{ vars.COMFYUI_VERSION }}

      - name: Debug - Inspect container
        run: |
          echo "Creating debug container..."
          container_id=$(docker create debug-image:latest)
          
          echo "Container filesystem contents:"
          docker export $container_id | tar -tv | grep -i comfyui
          
          echo "Copying files from container for inspection..."
          docker cp $container_id:/workspace ./workspace-debug
          
          echo "Workspace contents:"
          ls -la ./workspace-debug
          
          if [ -d "./workspace-debug/ComfyUI" ]; then
            echo "ComfyUI directory contents:"
            ls -la ./workspace-debug/ComfyUI
          else
            echo "ComfyUI directory not found!"
          fi
          
          docker rm $container_id

      # Option 1 (with caching) - commented for reference
      # - name: Build and push production image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     push: ${{ github.event_name != 'pull_request' }}
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}
      #     build-args: |
      #       PYTHON_VERSION=${{ vars.PYTHON_VERSION }}
      #       TORCH_VERSION=${{ vars.TORCH_VERSION }}
      #       CUDA_VERSION=${{ vars.CUDA_VERSION }}
      #       COMFYUI_VERSION=${{ vars.COMFYUI_VERSION }}
      #     cache-from: type=gha,scope=${{ github.workflow }}
      #     cache-to: type=gha,mode=max,scope=${{ github.workflow }}
      #     platforms: linux/amd64
      #     outputs: type=docker
      #     provenance: false

      # Option 3 (no caching)
      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PYTHON_VERSION=${{ vars.PYTHON_VERSION }}
            TORCH_VERSION=${{ vars.TORCH_VERSION }}
            CUDA_VERSION=${{ vars.CUDA_VERSION }}
            COMFYUI_VERSION=${{ vars.COMFYUI_VERSION }}
          platforms: linux/amd64
          outputs: type=docker
          provenance: false